.define PUBLIC PIO_SPI_CYCLES_PER_BIT 8
; We need 4 clock cycles to have the whole glitch happen in one 4 clock interval 
.define TIME_FOR_CLOCK_EVENT (PIO_SPI_CYCLES_PER_BIT / 2)

.program spi_with_setup_for_glitch
.side_set 1 opt

.wrap_target
normal_execution:
    out pins, 1 side 0 [TIME_FOR_CLOCK_EVENT - 1]
normal_execution_in:
    in pins, 1 side 1 [TIME_FOR_CLOCK_EVENT - 1]
.wrap

; this is where we jump to when we want to execute the glitch
; this needs to happen while before data is being sent 
public setup_glitch:
    pull block              ; get glitch cycles as word
    out x, 32               ; put glitch cycles into x

glitch_loop:
    out pins, 1 side 0 [TIME_FOR_CLOCK_EVENT - 2]
    jmp x--, continue_leading
glitch_leading:
    in pins, 1 side 1
    out pins, 1 side 0
    in pins, 1 side 1
    jmp normal_execution

continue_leading:
    in pins, 1 side 1 [TIME_FOR_CLOCK_EVENT - 2]
    jmp x--, glitch_loop
glitch_falling:
    out pins, 1 side 0
    in pins, 1 side 1
    out pins, 1 side 0
    jmp normal_execution_in
